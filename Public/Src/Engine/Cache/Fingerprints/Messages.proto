syntax = "proto3";

import "google/protobuf/wrappers.proto";

package BuildXL.Engine.Cache.Fingerprints;

enum GrpcReparsePointType { 
    None = 0;
    FileSymlink = 1;
    DirectorySymlink = 2;
    UnixSymlink = 3;
    Junction = 4;
    NonActionable = 5;
}

message GrpcFileMaterializationInfo
{
    bytes Hash = 1;
    int64 Length = 2;
    google.protobuf.StringValue FileName = 3;
    GrpcReparsePointType ReparsePointType = 4;
    google.protobuf.StringValue ReparsePointTarget = 5;
    bool IsAllowedFileRewrite = 6;
    bool IsExecutable = 7;
}

message RelativePathFileMaterializationInfo
{
    string RelativePath = 1;
    GrpcFileMaterializationInfo Info = 2;
}

message AbsolutePathFileMaterializationInfo
{
    string AbsolutePath = 1;
    GrpcFileMaterializationInfo Info = 2;
}

/// <summary>
/// TODO: Remove along with PipCacheDescriptor (V1)
/// </summary>
message StringKeyedHash
{
    string Key = 1;
    bytes ContentHash = 2;
}

/// <summary>
/// TODO: Remove along with PipCacheDescriptor (V1)
/// </summary>
message EncodedStringKeyedHash
{
    StringKeyedHash StringKeyedHash = 1;
    string EncodingName = 2;
}

enum ObservedInputKind {
    UnknownKind = 0;
    ObservedInput = 1;
    DirectoryMembership = 2;
}

/// <summary>
/// TODO: Remove along with PipCacheDescriptor (V1)
/// </summary>
message StringKeyedHashObservedInput
{
    StringKeyedHash StringKeyedHash = 1;
    ObservedInputKind ObservedInputKind = 2;
}

enum PipFingerprintEntryKind {
    Unknown = 0;
    DescriptorV1 = 1;
    DescriptorV2 = 2;
    GraphDescriptor = 3;
    FileDownload = 4;
    PackageDownload = 5;
    GraphInputDescriptor = 6;
}

/// <summary>
/// Descriptor for a cached graph.
/// </summary>
message PipGraphCacheDescriptor {
    uint64 Id = 1;

    /// <summary>
    /// TraceInfo specified for the BuildXL session.
    /// This is being added on the BuildXL specific PipCacheDescriptor as to not impact other users of BuildCache.
    /// As usage is observed it may be promoted to ContentBagCommon.Provenance where it more logically belongs. A lookup
    /// to a secondary record is not being added so as to avoid the cost to change eviction policy of the cache. The size
    /// consumed by this additional info is relatively small in comparison to the overall size of the PipCacheDescriptor.
    /// </summary>
    string TraceInfo = 2;

    google.protobuf.BytesValue PathTable = 3;
    google.protobuf.BytesValue StringTable = 4;
    google.protobuf.BytesValue SymbolTable = 5;
    google.protobuf.BytesValue QualifierTable = 6;
    google.protobuf.BytesValue PipTable = 7;
    google.protobuf.BytesValue PreviousInputs = 8;
    google.protobuf.BytesValue MountPathExpander = 9;
    google.protobuf.BytesValue ConfigState = 10;
    google.protobuf.BytesValue DirectedGraph = 11;
    google.protobuf.BytesValue PipGraph = 12;
    google.protobuf.BytesValue EngineState = 13;
    google.protobuf.BytesValue HistoricTableSizes = 14;
    google.protobuf.BytesValue PipGraphId = 15;
}

/// <summary>
/// Descriptor for downloading a file.
/// </summary>
message FileDownloadDescriptor {
    uint64 Id = 1;

    /// <summary>
    /// TraceInfo specified for the BuildXL session.
    /// This is being added on the BuildXL specific PipCacheDescriptor as to not impact other users of BuildCache.
    /// As usage is observed it may be promoted to ContentBagCommon.Provenance where it more logically belongs. A lookup
    /// to a secondary record is not being added so as to avoid the cost to change eviction policy of the cache. The size
    /// consumed by this additional info is relatively small in comparison to the overall size of the PipCacheDescriptor.
    /// </summary>
    string TraceInfo = 2;

    bytes Content = 3;
    string Url = 4;
}

/// <summary>
/// Descriptor for a package.
/// </summary>
message PackageDownloadDescriptor {
    uint64 Id = 1;

    /// <summary>
    /// TraceInfo specified for the BuildXL session.
    /// This is being added on the BuildXL specific PipCacheDescriptor as to not impact other users of BuildCache.
    /// As usage is observed it may be promoted to ContentBagCommon.Provenance where it more logically belongs. A lookup
    /// to a secondary record is not being added so as to avoid the cost to change eviction policy of the cache. The size
    /// consumed by this additional info is relatively small in comparison to the overall size of the PipCacheDescriptor.
    /// </summary>
    string TraceInfo = 2;

    /// <summary>
    /// Provenance which servers were used and what the id is.
    /// </summary>
    string FriendlyName = 3;

    /// <summary>
    /// Map of relative path to package content
    /// </summary>
    repeated StringKeyedHash Contents = 4;
}

/// <summary>
/// Protobuf-serialized part of a descriptor for a particular pip execution. This is the 'V2' format in which we have
/// a two-phase lookup (weak and strong fingerprints), hence ObservedInputHashesByPath and ObservedDirectoryMembershipFingerprintsByPath
/// have been removed. 
/// Furthermore, all output hashes (including standard error and standard output) are stored externally, since cache entries
/// natively store hash-lists. PipCacheDescriptorV2Metadata is serialized and referenced by hash in the 'metadata' slot of the cache entry;
/// together with the hash list, this forms a PipCacheDescriptorV2 (which is not a Protobuf type).
/// </summary>
message PipCacheDescriptorV2Metadata {    
    uint64 Id = 1;

    // TODO: We are inheriting a random ID field. That's not ideal for storing into the CAS.

    /// <summary>
    /// Number of warnings found in standard output and standard error.
    /// </summary>
    int32 NumberOfWarnings = 2;

    /// <summary>
    /// TraceInfo specified for the BuildXL session.
    /// This is being added on the BuildXL specific PipCacheDescriptor as to not impact other users of BuildCache.
    /// As usage is observed it may be promoted to ContentBagCommon.Provenance where it more logically belongs. A lookup
    /// to a secondary record is not being added so as to avoid the cost to change eviction policy of the cache. The size
    /// consumed by this additional info is relatively small in comparison to the overall size of the PipCacheDescriptor.
    /// </summary>
    string TraceInfo = 3;

    // TODO: The following fields contain encodings, paths, and hashes that should ideally go away. 
    //        It would be far easier to (a) just decide console encoding statically for the pip, and have it in the fingerprint (and maybe universally choose UTF8),
    //        and (b) treat console output like normal outputs (possibly marked 'Temporary' if not redirected).

    /// <summary>
    /// Standard output (or null, if standard output was not saved).
    /// </summary>
    optional EncodedStringKeyedHash StandardOutput = 4;

    /// <summary>
    /// Standard error (or null, if standard error was not saved).
    /// </summary>
    optional EncodedStringKeyedHash StandardError = 5;

    /// <summary>
    /// Size of all referenced outputs.
    /// <summary>
    int64 TotalOutputSize = 6;

    /// <summary>
    /// Hashes of the outputs
    /// The ordering must match with outputs defined in the pip
    /// </summary>
    repeated AbsolutePathFileMaterializationInfo StaticOutputHashes = 7;

    /// <summary>
    /// Dynamic outputs (<relative path, hash>) per opaque directory.
    /// The ordering must match with OpaqueDirectory outputs defined in the pip
    /// </summary>
    message RelativePathFileMaterializationInfoList {
        repeated RelativePathFileMaterializationInfo RelativePathFileMaterializationInfos = 1;
    }
    repeated RelativePathFileMaterializationInfoList DynamicOutputs = 8;

    string WeakFingerprint = 9;
    string StrongFingerprint = 10;
    int64 SemiStableHash = 11;

    /// <summary>
    /// Session Id of the build who creates this metadata
    /// </summary>
    string SessionId = 12;

    /// <summary>
    /// Related session Id of the build who creates this metadata
    /// </summary
    string RelatedSessionId = 13;

    /// <summary>
    /// Collection of directories that were succesfully created during pip execution. 
    /// </summary>
    /// <remarks>
    /// Only populated if allowed undeclared reads is on, since these are used for computing directory fingerprint enumeration when undeclared files are allowed.
    /// </remarks>
    repeated string CreatedDirectories = 14;
};

/// <summary>
/// Result of a fingerprint lookup. This type is a workaround for the fact that ICache
/// is parameterized on only one result type for fingerprint lookup, whereas that varies
/// by lookup type (is this a weak or strong fingerprint lookup?). The Data field is
/// polymorphic, with the concrete type indicate by Kind.
/// </summary>
message PipFingerprintEntry {
    PipFingerprintEntryKind Kind = 1;
    bytes DataBlob = 2;
};

message StringKeyValue
{
    string Key = 1;
    google.protobuf.StringValue Value = 2;
}

/// <summary>
/// Pip graph input metadata.
/// </summary>
message PipGraphInputDescriptor
{
    uint64 Id = 1;

    /// <summary>
    /// Observed inputs.
    /// </summary>
    repeated StringKeyedHashObservedInput ObservedInputsSortedByPath = 2;

    /// <summary>
    /// Environment variables.
    /// </summary>
    repeated StringKeyValue EnvironmentVariablesSortedByName = 3;

    /// <summary>
    /// Mounts (name and path).
    /// </summary>
    repeated StringKeyValue MountsSortedByName = 4;
}