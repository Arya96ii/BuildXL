
Transformer.execute({
    tool: {exe: f`./src/foo.exe`},
    arguments: {
        escaping: "CRuntimeArgumentRules",
        separator: " ",
        items: [
            "--opt",
            "bar",
            "--out",
            p`./Out/out.txt`,
        ],
    },
    workingDirectory: d`./src`,
    dependencies: [f`./src/foo.exe`],
    implicitOutputs: [d`.`],
    environmentVariables: [
        {
            name: "TEMP",
            value: p`./tmp_test/k/w/6k5ykzrovlnle3hdbgx4lv7q/t`,
            isPassThrough: false,
        },
        {
            name: "TMP",
            value: p`./tmp_test/k/w/6k5ykzrovlnle3hdbgx4lv7q/t`,
            isPassThrough: false,
        },
    ],
    tempDirectory: d`./tmp_test/k/w/6k5ykzrovlnle3hdbgx4lv7q/t`,
    unsafe: {
        untrackedScopes: [
            p`./tmp_test/k/w/6k5ykzrovlnle3hdbgx4lv7q/t`,
            p`\${Context.getMount('Windows').path}`,
            p`\${Context.getMount('InternetCache').path}`,
            p`\${Context.getMount('InternetHistory').path}`,
            p`\${Context.getMount('ProgramFiles').path}/Windows Defender`,
            p`\${Context.getMount('ProgramFilesX86').path}/Windows Defender`,
            p`\${Context.getMount('ProgramData').path}/Microsoft/Windows Defender`,
            p`\${Context.getMount('AppData').path}`,
            p`\${Context.getMount('LocalAppData').path}`,
        ],
    },
    allowUndeclaredSourceReads: true,
});
Transformer.sealSharedDynamicDirectory({root: d`.`});