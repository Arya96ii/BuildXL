<# The script file is used to validate SBOM in rolling build pipelines.
The script file checks if all the sections in SBOM are present as expected, throws an error when any of the sections are missing or empty.
#>
# In PR validation(Primary Validation Pipeline) the path to the manifest file contains an ADO predefined variable which is passed as an argument in the pipeline.
# BcdeOutputFile is an output file generated by component governance, this file is added to the drop for validation.
param (
  $SBOMManifestFile,
  $BcdeOutputFile
)
# This condition checks if the manifest file exists or not, throws an error if the file does not exist.
if (-Not(Get-Item -Path $SBOMManifestFile -ErrorAction Ignore)) {
  throw "SBOM package file does not exist"
}

# This condition checks if the component detection output file(bcde-output.json) exists or not, throws an error if the file does not exist.
if (-Not(Get-Item -Path $BcdeOutputFile -ErrorAction Ignore)) {
  throw "Component detection output file is not added to the drop"
}

# This block of code checks if all the sections are present as expected.
$ManifestObject = Get-Content -Raw $SBOMManifestFile  | ConvertFrom-Json
$SBOMSections = 'files', 'packages', 'relationships', 'creationInfo', 'spdxVersion', 'dataLicense', 'SPDXID', 'name', 'documentNamespace', 'documentDescribes'
forEach ($section in $SBOMSections) {
  # This condition checks if the section is null
  if ($ManifestObject.$section -eq $null) {
    Write-Error $section" is not present in SBOM"
    continue
  }

  # The next subsequent conditions are used to check if the sections are empty based on their type
  # This condition is used to check if the sections which are of type Collections are empty or not 
  if ($ManifestObject.$section.GetType().Name -eq "Object[]") {
    if (-Not($ManifestObject.$section.count -gt 0)) {
      throw ($section + " of type Collection is empty")
    }
    # Adding this condition to ensure that there is atleast one-package depedency present.
    if ($section -eq 'relationships') {
      $relationshipTypeArray = $ManifestObject.$section | Where-Object { $_.relationshipType -eq 'DEPENDS_ON' }
      if ($relationshipTypeArray -eq $null) {
        throw "There should be atleast one package dependency present. SBOM validation failed"
      }
    }
  }

  # This condition is used to check if the sections which are of type String are empty or not
  if ($ManifestObject.$section.GetType().Name -eq "String") {
    if ($ManifestObject.$section -eq "") {
      throw ($section + " of type String is empty")
    }
  }

  # This condition is used to check if the sections of type PSCustomObject are empty or not
  if ($ManifestObject.$section.GetType().Name -eq "PSCustomObject") {
    if ("" -eq $ManifestObject.$section) {
      throw ($section + " of type PSCustomObject is empty")
    }
  }
}

# This part of the script file checks whether the components identified by the CG are also listed in the SBOM.
# Creating an arraylist of components obtained from the component governance output file(bcde-output.json).
$BcdeFileObject = Get-Content -Raw $BcdeOutputFile  | ConvertFrom-Json
$ListOfComponents = New-Object -TypeName System.Collections.ArrayList;
forEach ($component in $BcdeFileObject.componentsFound.component) {
  # If the type of the component is Git/DockerReference/Maven then the package name is obtained accordingly.
  if ($component.type -eq "Git") {
    $ListOfComponents.Add($component.id) | Out-Null
  }
  elseif ($component.type -eq "Maven") {
    $mavenComponentName = $component.groupId + "." + $component.artifactId
    $ListOfComponents.Add($mavenComponentName) | Out-Null       
  }
  elseif ($component.type -eq "DockerReference") {
    $ListOfComponents.Add($component.digest) | Out-Null    
  }
  else {
    $ListOfComponents.Add($component.name) | Out-Null
  }
}

# Creating an arraylist of packages obtained from the manifest file.
$ListOfPackages = New-Object -TypeName System.Collections.ArrayList;
forEach ($package in $ManifestObject.packages) {
  # Adding this condition as it is a package specific to SBOM and will not be identified as a component by CG.
  if ($package.SPDXID -ne "SPDXRef-RootPackage") {
    $ListOfPackages.Add($package.name) | Out-Null
  }
}

# Comparing the two lists to see if any of the components or packages are missing.
$Result = Compare-Object $ListOfComponents $ListOfPackages
foreach ($Element in $Result) {
  if ($Element.SideIndicator -eq "<=") {
    throw "$($Element.InputObject) package is not present in the manifest file"
  }
  else {
    throw "$($Element.InputObject) is found in SPDX package list but not in component governance output file."
  }
}