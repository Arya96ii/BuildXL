trigger: none  # Explicitly scheduled for PRs

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

variables:
  PackageArtifactName: runtime.linux-x64.BuildXL.${{ parameters.LinuxRuntimePackageVersion }}
  PackageDir: $(Build.SourcesDirectory)/Public/Src/Sandbox/Linux/bin/$(PackageArtifactName)

parameters:
- name: BuildSelfhost
  type: boolean
  default: true
- name: BuildLinuxRuntime
  type: boolean
  default: true
- name: PublishLinuxRuntimeNuget
  type: boolean
  default: false
- name: LinuxRuntimePackageVersion
  type: string
  default: 0.1.0-$(Build.BuildNumber).$(System.JobAttempt)

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:

    # quay.io/pypa/manylinux2014_x86_64 chosen because the Linux runtime binaries must be built for 'manylinux2014' (more precisely, against glibc 2.17)
    pool:
      name: 1ES-Shared-Hosted-Pool_Linux-Mariner-2
      os: linux
    containers:
      default_linux_container:
        image: quay.io/pypa/manylinux2014_x86_64
      linux_container:
        image: 1espipelinesdevpme.azurecr.io/linux/ubuntu-1804:latest
        registry: 1espipelinesdevpme.azurecr.io
        tenantId: PME
        identityType: 1ESPipelineIdentity
        
    stages:
    - stage: Build
      jobs:
      # Build and test selfhost with BuildXL
      - ${{ if parameters.BuildSelfhost }}:
        - template: /.azdo/linux/job-selfhost.yml@self
          parameters:
            ValidationName: PublicRelease
            BxlExtraArgs: /q:ReleaseLinux

        - template: /.azdo/linux/job-selfhost.yml@self
          parameters:
            ValidationName: InternalRelease
            BxlExtraArgs: --internal /q:ReleaseLinux

      # Build Linux native runtime libraries with make
      - ${{ if parameters.BuildLinuxRuntime }}:
        - job: BuildLinuxRuntime
          displayName: Build Linux Runtime
          templateContext:
            inputs:
            - input: checkout
              repository: self
              fetchDepth: 1
            outputs:
            - output: pipelineArtifact
              targetPath: $(PackageDir)
              artifactName: $(PackageArtifactName)
              condition: always()
              continueOnError: true
              displayName: Publish Pipeline Artifact
            sdl:
              credscan:
                enabled: false
              antimalwareScan:
                enabled: false
              publishLogs:
                enabled: false
          steps:
          - bash: make cleanall && make all -j
            workingDirectory: Public/Src/Sandbox/Linux
            failOnStderr: true
            displayName: Build Native

          - bash: bash mknuget.sh ${{ parameters.LinuxRuntimePackageVersion }}
            workingDirectory: Public/Src/Sandbox/Linux
            displayName: Pack Nuget

        # Publish the built runtime in a separate job
        # TODO: this could be merged with the previous job if the container image had all the required tools preinstalled
        - ${{ if parameters.PublishLinuxRuntimeNuget }}:
          - job: PublishNativeRuntimeNuget
            displayName: Publish Linux Runtime NuGet
            dependsOn: [ BuildLinuxRuntime ]
            container: linux_container
            steps:
            - checkout: none
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: $(PackageArtifactName)
                path:  $(Build.ArtifactStagingDirectory)/$(PackageArtifactName)
            - template: /.azdo/linux/step-nuget-config.yml@self
            - bash: |
                set -eu
                zip -r ../$(PackageArtifactName).nupkg *
                dotnet nuget push --skip-duplicate --api-key "AzureDevOps" --source "$(Feed-BuildXL.Selfhost)" ../$(PackageArtifactName).nupkg
              displayName: Push NuGet
              workingDirectory: $(Build.ArtifactStagingDirectory)/$(PackageArtifactName)
