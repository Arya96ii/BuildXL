jobs:
- job: Selfhost
  displayName: Build and Validate Selfhost
  pool:
    vmImage: ubuntu-18.04

  timeoutInMinutes: 90

  strategy:
    matrix:
      InternalRelease:
        BxlMatrixArgs: --internal /q:ReleaseLinux
      PublicRelease:
        BxlMatrixArgs: /q:ReleaseLinux

  variables:
    skipComponentGovernanceDetection: true # done elsewhere (in the main rolling pipeline)
    BxlCommonArgs: --shared-comp /ado /logsToRetain:10 /cacheMiss /logObservedFileAccesses /logoutput:FullOutputOnError # /p:[Sdk.BuildXL]xunitSemaphoreCount=20

  steps:
  - checkout: self
    fetchDepth: 1

  # Azure Key Vault
  # Download Azure Key Vault secrets
  - task: AzureKeyVault@2
    inputs:
      connectedServiceName: CloudBuild-PME-PROD-KV-01
      keyVaultName: BuildXLVaultRelease
      secretsFilter: '*'
      runAsPreJob: true 

  - task: Cache@2
    inputs:
      key: '"bxl" | "1" | "$(Agent.OS)" | "$(BxlMatrixArgs)" | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      # if no cache entry is already associated with 'key', the most recent cache entry associated with the key prefix below (if any) will be restored
      restoreKeys: |
        "bxl" | "1" | "$(Agent.OS)" | "$(BxlMatrixArgs)" | "$(Build.SourceBranch)" 
        "bxl" | "1" | "$(Agent.OS)" | "$(BxlMatrixArgs)"
        "bxl" | "1" | "$(Agent.OS)"
        "bxl" | "1"
      path: Out/Cache.noindex
    displayName: Cache BuildXL's cache dir
    continueOnError: true
    timeoutInMinutes: 10

  - task: UseDotNet@2
    displayName: Use .NET Core sdk 6.x
    inputs:
      version: 6.x

  - template: step-nuget-config.yml

  - bash: |
      set -eu
      bash bxl.sh $(BxlCommonArgs) --minimal --internal --deploy-dev-release
    displayName: Build
    env:
      PAT1esSharedAssets: $(PAT-TseBuild-AzureDevOps-1esSharedAssets-Package-Read)
      PATCloudBuild: $(PAT-TseBuild-AzureDevOps-CloudBuild-Packaging-Read)


  - bash: |
      echo "== Deleting Out/frontend/Nuget/tmp folder to reduce the size of the NuGet cache dir"
      rm -rf Out/frontend/Nuget/tmp Out/Objects.noindex Out/bin Out/BootStrap
      echo "== Disk usage of folders in Out"
      du -sh Out/*
    continueOnError: true
    condition: always()
    displayName: Free up disk space

  - bash: |
      set -eu
      function run_build {
        # the disks on Azure Pipeline VMs are too small to build everything, so let's instead run tests
        bash bxl.sh --use-dev $(BxlCommonArgs) $(BxlMatrixArgs) "/f:tag='test'"
      }

      run_build || {
        echo "\n**** First build failed, retrying once ***\n"
        run_build
      }
    displayName: Test
    env:
      PAT1esSharedAssets: $(PAT-TseBuild-AzureDevOps-1esSharedAssets-Package-Read)
      PATCloudBuild: $(PAT-TseBuild-AzureDevOps-CloudBuild-Packaging-Read)

  - task: PublishPipelineArtifact@1
    displayName: Upload BuildXL Logs
    inputs:
      targetPath: $(Build.SourcesDirectory)/Out/Logs
      artifactName: BuildXL-Logs.$(System.JobName).$(System.JobAttempt)
    condition: always()
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy XUnit Result Files
    inputs:
        sourceFolder: $(Build.SourcesDirectory)/Out/Objects.noindex/
        contents: '**/xunit.results*.xml'
        targetFolder: $(Build.ArtifactStagingDirectory)/xunit-logs
        cleanTargetFolder: true
        ignoreMakeDirErrors: true
        flattenFolders: true
    condition: always()
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: XUnit
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/xunit-logs/**/xunit*.xml'
    condition: always()
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Upload XUnit Logs
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/xunit-logs
      artifactName: XUnit-Logs.$(System.JobName).$(System.JobAttempt)
    condition: always()
    continueOnError: true
