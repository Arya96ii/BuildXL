jobs:
- job: Selfhost
  displayName: Build and Validate Selfhost
  pool:
    name: BuildXL-DevOpsAgents-Linux-PME

  timeoutInMinutes: 90

  strategy:
    matrix:
      InternalRelease:
        BxlMatrixName: InternalReleaseLinux
        BxlMatrixArgs: --internal /q:ReleaseLinux
      PublicRelease:
        BxlMatrixName: ReleaseLinux
        BxlMatrixArgs: /q:ReleaseLinux

  variables:
    skipComponentGovernanceDetection: true # done elsewhere (in the main rolling pipeline)
    BxlCommonArgs: --shared-comp /ado /cacheMiss:"[Bxl.Selfhost.Linux]" /logObservedFileAccesses /cacheConfigFilePath:Out/CacheConfig.json /logoutput:FullOutputOnError # /p:[Sdk.BuildXL]xunitSemaphoreCount=20

  steps:
  - checkout: self
    fetchDepth: 1

  # Azure Key Vault
  # Download Azure Key Vault secrets
  - task: AzureKeyVault@2
    inputs:
      connectedServiceName: CloudBuild-PME-PROD-KV-01
      keyVaultName: BuildXLVaultRelease
      secretsFilter: '*'
      runAsPreJob: true 

  - task: UseDotNet@2
    displayName: Use .NET Core sdk 6.x
    inputs:
      version: 6.x

  - template: step-nuget-config.yml

  - bash: |
      set -euo pipefail
      readonly isNotMaster="${{ ne(variables['Build.SourceBranchName'], 'master') }}"
      mkdir -p Out
      tee Out/CacheConfig.json << EOF
      {
      "RemoteIsReadOnly": ${isNotMaster,,},
      "SkipDeterminismRecovery":  true,
      "RemoteConstructionTimeoutMilliseconds":  10000,
      "Assembly":  "BuildXL.Cache.VerticalAggregator",
      "Type":  "BuildXL.Cache.VerticalAggregator.VerticalCacheAggregatorFactory",
      "RemoteCache":  {
                          "CacheServiceFingerprintEndpoint":  "https://mseng.artifacts.visualstudio.com/DefaultCollection",
                          "RequiredContentKeepUntilHours":  1,
                          "Assembly":  "BuildXL.Cache.BuildCacheAdapter",
                          "CacheServiceContentEndpoint":  "https://mseng.vsblob.visualstudio.com/DefaultCollection",
                          "Type":  "BuildXL.Cache.BuildCacheAdapter.BuildCacheFactory",
                          "CacheLogPath":  "[BuildXLSelectedLogPath].Remote.log",
                          "CacheId":  "L3Cache",
                          "CacheNamespace":  "BuildXLSelfhost.Linux",
                          "UseBlobContentHashLists":  true
                      },
      "LocalCache":  {
                        "MaxCacheSizeInMB":  20240,
                        "Assembly":  "BuildXL.Cache.MemoizationStoreAdapter",
                        "UseStreamCAS":  true,
                        "Type":  "BuildXL.Cache.MemoizationStoreAdapter.MemoizationStoreCacheFactory",
                        "CacheLogPath":  "[BuildXLSelectedLogPath]",
                        "CacheRootPath":  "[BuildXLSelectedRootPath]",
                        "CacheId":  "SelfhostCS2L1",
                        "UseRocksDbMemoizationStore":  true
                    }
      }
      EOF
    displayName: Write cache config file

  - bash: |
      sudo mkdir /home/subst
      sudo mount --verbose --bind $(Build.SourcesDirectory) /home/subst
    displayName: Bind /home/subst to sources directory  

  - bash: |
      set -eu
      bash bxl.sh $(BxlCommonArgs) /logsDirectory:"Out/Logs/Build" --minimal --internal --deploy-dev-release
    displayName: Build
    workingDirectory: /home/subst
    env:
      PAT1esSharedAssets: $(PAT-TseBuild-AzureDevOps-1esSharedAssets-Package-Read)
      PATCloudBuild: $(PAT-TseBuild-AzureDevOps-CloudBuild-Packaging-Read)
      VSTSPERSONALACCESSTOKEN: $(PAT-TseBuild-AzureDevOps-mseng-buildcache)

  - bash: |
      echo "== Deleting Out/frontend/Nuget/tmp, Out/bin, Out/Boorstrap folders to reduce the size of the NuGet cache dir"
      rm -rf Out/frontend/Nuget/tmp Out/Objects.noindex Out/bin Out/BootStrap
      echo "== Disk usage of folders in Out"
      du -sh Out/*
    continueOnError: true
    condition: always()
    displayName: Free up disk space

  - bash: |
      set -eu
      function run_build {
        # the disks on Azure Pipeline VMs are too small to build everything, so let's instead run tests
        bash bxl.sh --use-dev $(BxlCommonArgs) /logsDirectory:"Out/Logs/$(BxlMatrixName)" $(BxlMatrixArgs) "/f:tag='test'"
      }

      run_build || {
        echo "\n**** First build failed, retrying once ***\n"
        run_build
      }
    displayName: Test
    workingDirectory: /home/subst
    env:
      PAT1esSharedAssets: $(PAT-TseBuild-AzureDevOps-1esSharedAssets-Package-Read)
      PATCloudBuild: $(PAT-TseBuild-AzureDevOps-CloudBuild-Packaging-Read)
      VSTSPERSONALACCESSTOKEN: $(PAT-TseBuild-AzureDevOps-mseng-buildcache)

  - task: PublishPipelineArtifact@1
    displayName: Upload BuildXL Logs
    inputs:
      targetPath: $(Build.SourcesDirectory)/Out/Logs
      artifactName: BuildXL-Logs.$(System.JobName).$(System.JobAttempt)
    condition: always()
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy XUnit Result Files
    inputs:
        sourceFolder: $(Build.SourcesDirectory)/Out/Objects.noindex/
        contents: '**/xunit.results*.xml'
        targetFolder: $(Build.ArtifactStagingDirectory)/xunit-logs
        cleanTargetFolder: true
        ignoreMakeDirErrors: true
        flattenFolders: true
    condition: always()
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: XUnit
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/xunit-logs/**/xunit*.xml'
    condition: always()
    continueOnError: true

  - task: PublishPipelineArtifact@1
    displayName: Upload XUnit Logs
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/xunit-logs
      artifactName: XUnit-Logs.$(System.JobName).$(System.JobAttempt)
    condition: always()
    continueOnError: true

  - bash: sudo umount -v --lazy /home/subst
    condition: always()
    displayName: Unmount /home/subst
